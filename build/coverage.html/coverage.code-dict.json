{"/home/travis/build/npmtest/node-npmtest-grunt-debian-package/test.js":"/* istanbul instrument in package npmtest_grunt_debian_package */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/lib.npmtest_grunt_debian_package.js":"/* istanbul instrument in package npmtest_grunt_debian_package */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_debian_package = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_debian_package = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-debian-package && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_debian_package */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_debian_package\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_debian_package.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_debian_package.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_debian_package.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_debian_package.__dirname + '/lib.npmtest_grunt_debian_package.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/node_modules/grunt-debian-package/Gruntfile.js":"/*\n * grunt-debian-package\n * https://github.com/jamesdbloom/grunt-debian-package\n *\n * Copyright (c) 2014 James Bloom\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n    grunt.initConfig({\n        jshint: {\n            all: [\n                'Gruntfile.js',\n                'tasks/*.js',\n                '<%= nodeunit.unit %>',\n                '<%= nodeunit.integration %>'\n            ],\n            options: {\n                jshintrc: '.jshintrc'\n            }\n        },\n\n        // before generating any new files, remove any previously-created files\n        clean: {\n            pre_test: ['tmp', 'test/unit/tmp', 'test/integration/tmp'],\n            post_test: ['tmp', 'test/unit/tmp', 'test/integration/tmp']\n        },\n\n        // configuration to be run (and then tested)\n        debian_package: {\n            default_options: {\n                options: {\n                    quiet: true,\n                    maintainer: {\n                        name: \"James D Bloom\",\n                        email: \"jamesdbloom@email.com\"\n                    },\n                    simulate: true\n                },\n                files: [\n                    {\n                        src: 'tasks/debian_package.js',\n                        dest: '/var/www/tasks/debian_package.js'\n                    }\n                ]\n            },\n            custom_options: {\n                options: {\n                    quiet: true,\n                    maintainer: {\n                        name: \"James D Bloom\",\n                        email: \"jamesdbloom@email.com\"\n                    },\n                    prefix: \"prefix-\",\n                    name: \"package_name\",\n                    postfix: \"-postfix\",\n                    short_description: \"the short description\",\n                    long_description: \"the long description added to the debian package\",\n                    version: \"2.0.0\",\n                    build_number: \"1\",\n                    preinst: {\n                        src: 'test/integration/test_preinst.sh',\n                        contents: '#!/bin/bash\\n' +\n                            'echo \"test preinst script from contents\"'\n                    },\n                    postinst: {\n                        src: 'test/integration/test_postinst.sh'\n                    },\n                    prerm: {\n                        contents: '#!/bin/bash\\n' +\n                            'echo \"test prerm script from contents\"'\n                    },\n                    links: [\n                        {\n                            source: '/var/log/${name}',\n                            target: '/var/log/tomcat7'\n                        },\n                        {\n                            source: '/etc/init.d/${name}',\n                            target: '/etc/init.d/tomcat7'\n                        }\n                    ],\n                    directories: [\n                        '/var/app/${name}'\n                    ],\n                    working_directory: 'test/integration/tmp/',\n                    simulate: true\n                },\n                files: [\n                    {\n                        expand: true,\n                        cwd: 'tasks',\n                        src: [\n                            '**/*.js'\n                        ],\n                        dest: '/var/www/tasks'\n                    },\n                    {\n                        src: [\n                            'test/integration/custom_options/packaging/debian/changelog',\n                            'test/integration/custom_options/packaging/debian/control'\n                        ],\n                        dest: '/var/www/'\n                    }\n                ]\n            }\n        },\n\n        /*\n         ======== A Handy Little Nodeunit Reference ========\n         https://github.com/caolan/nodeunit\n\n         Test methods:\n         test.expect(numAssertions)\n         test.done()\n\n         Test assertions:\n         test.fail(actual, expected, message, operator, stackStartFunction value)\n         test.ok(value, [message])\n         test.equal(actual, expected, [message])\n         test.notEqual(actual, expected, [message])\n         test.deepEqual(actual, expected, [message])\n         test.notDeepEqual(actual, expected, [message])\n         test.strictEqual(actual, expected, [message])\n         test.notStrictEqual(actual, expected, [message])\n         test.throws(block, [error], [message])\n         test.doesNotThrow(block, [error], [message])\n         test.ifError(value)\n         */\n\n        // Unit tests.\n        nodeunit: {\n            unit: [\n                'test/unit/*_test.js'\n            ],\n            integration: [\n                'test/integration/*_test.js'\n            ],\n            options: {\n                reporter: 'nested'\n            }\n        }\n    });\n\n    // load this plugin's task\n    grunt.loadTasks('tasks');\n\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n    grunt.registerTask('test', ['clean:pre_test', 'debian_package', 'nodeunit', 'clean:post_test']);\n\n    grunt.registerTask('default', ['jshint', 'test']);\n    grunt.registerTask('travis', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/node_modules/grunt-debian-package/tasks/debian_package.js":"/*\n * grunt-debian-package\n * https://github.com/jamesdbloom/grunt-debian-package\n *\n * Copyright (c) 2014 James Bloom\n * Licensed under the MIT license.\n */\n\nvar fileSystem = require('./fileOrDirectory.js');\nvar replace = require('./replace.js');\n\nmodule.exports = function (grunt) {\n\n    'use strict';\n\n    var _validateOptions = require('./options.js')._validate(grunt),\n        _copy = fileSystem._copy(grunt),\n        _cleanUp = fileSystem._cleanUp(grunt),\n        _findAndReplace = replace._findAndReplace(grunt),\n        _transformAndReplace = replace._transformAndReplace(grunt),\n        preparePackageContents = function (makefile, files, follow_soft_links, quiet) {\n            _transformAndReplace([makefile], '\\\\$\\\\{file_list\\\\}', files, function (file) {\n                return file.src.filter(function (filepath) {\n                    if (!grunt.file.exists(filepath)) {\n                        grunt.log.warn('File \\'' + filepath + '\\' not found');\n                        return false;\n                    } else {\n                        return !grunt.file.isDir(filepath);\n                    }\n                }).map(function (filepath) {\n                    if (!quiet) {\n                        grunt.log.writeln('Adding \\'' + filepath + '\\' to \\'' + file.dest + '\\'');\n                    }\n                    var soft_links_argument = \"-P \";\n                    return '\\tmkdir -p \"$(DESTDIR)' + file.dest.substr(0, file.dest.lastIndexOf('/')) + '\" && cp -a ' + (follow_soft_links ? \"\" : \"-P \") + '\"' + process.cwd() + '/' + filepath + '\" \"$(DESTDIR)' + file.dest + '\"\\n';\n                }).join('');\n            });\n        };\n\n    grunt.registerMultiTask('debian_package', 'Create debian package from grunt build', function () {\n            // tell Grunt this task is asynchronous.\n            var done = this.async();\n\n            // Merge task-specific and/or target-specific options with these defaults.\n            var pkg = grunt.file.readJSON('package.json'),\n                options = this.options({\n                    maintainer: process.env.DEBFULLNAME && process.env.DEBEMAIL && {\n                        name: process.env.DEBFULLNAME,\n                        email: process.env.DEBEMAIL\n                    } || pkg.author && pkg.author.name && pkg.author.email && pkg.author,\n                    name: pkg.name,\n                    prefix: \"\",\n                    postfix: \"\",\n                    short_description: (pkg.description && pkg.description.split(/\\r\\n|\\r|\\n/g)[0]) || '',\n                    long_description: (pkg.description && pkg.description.split(/\\r\\n|\\r|\\n/g).splice(1).join(' ')) || '',\n                    version: pkg.version,\n                    build_number: process.env.BUILD_NUMBER || process.env.DRONE_BUILD_NUMBER || process.env.TRAVIS_BUILD_NUMBER || '1',\n                    working_directory: 'tmp/',\n                    packaging_directory_name: 'packaging',\n                    target_architecture: \"all\",\n                    category: \"misc\",\n                    disable_debuild_deps_check: false\n                }),\n                spawn = require('child_process').spawn,\n                dateFormat = require('dateformat'),\n                now = dateFormat(new Date(), 'ddd, d mmm yyyy h:MM:ss +0000'),\n                temp_directory = options.working_directory + options.packaging_directory_name,\n                controlDirectory = temp_directory + '/debian',\n                changelog = controlDirectory + '/changelog',\n                control = controlDirectory + '/control',\n                links = controlDirectory + '/links',\n                dirs = controlDirectory + '/dirs',\n                makefile = temp_directory + '/Makefile',\n                dependencies = '';\n\n            if (!_validateOptions(options, options.quiet)) {\n                return done(false);\n            }\n\n            _cleanUp(options, true);\n            _copy(__dirname + '/../' + options.packaging_directory_name, temp_directory);\n            \n            if (options.custom_template) {\n            \t_copy(options.custom_template, temp_directory);\n            }\n\n            // set environment variables if they are not already set\n            process.env.DEBFULLNAME = options.maintainer.name;\n            process.env.DEBEMAIL = options.maintainer.email;\n\n            if (options.dependencies) {\n                dependencies = ', ' + options.dependencies;\n            }\n\n            // generate packaging control files\n            _transformAndReplace([links], '\\\\$\\\\{softlinks\\\\}', options.links || [], function (softlink) {\n                return softlink.target + '       ' + softlink.source + '\\n';\n            });\n            _transformAndReplace([dirs], '\\\\$\\\\{directories\\\\}', options.directories || [], function (directory) {\n                return directory + '\\n';\n            });\n            _findAndReplace([changelog, control], '\\\\$\\\\{maintainer.name\\\\}', options.maintainer.name);\n            _findAndReplace([changelog, control], '\\\\$\\\\{maintainer.email\\\\}', options.maintainer.email);\n            _findAndReplace([changelog], '\\\\$\\\\{date\\\\}', now);\n            _findAndReplace([changelog, control, links, dirs], '\\\\$\\\\{name\\\\}', options.package_name);\n            _findAndReplace([control], '\\\\$\\\\{short_description\\\\}', options.short_description);\n            _findAndReplace([control], '\\\\$\\\\{long_description\\\\}', options.long_description);\n            _findAndReplace([changelog, control, links, dirs], '\\\\$\\\\{version\\\\}', options.version);\n            _findAndReplace([changelog, control, links, dirs], '\\\\$\\\\{build_number\\\\}', options.build_number);\n            _findAndReplace([control], '\\\\$\\\\{dependencies\\\\}', dependencies);\n            _findAndReplace([control], '\\\\$\\\\{target_architecture\\\\}', options.target_architecture);\n            _findAndReplace([control], '\\\\$\\\\{category\\\\}', options.category);\n            preparePackageContents(makefile, this.files, options.follow_soft_links, options.quiet);\n\n            // copy package lifecycle scripts\n            var scripts = ['preinst', 'postinst', 'prerm', 'postrm'];\n            for (var i = 0; i < scripts.length; i++) {\n                if (options[scripts[i]]) {\n                    var destination = controlDirectory + '/' + scripts[i];\n                    grunt.verbose.writeln(JSON.stringify(options[scripts[i]]));\n                    if (options[scripts[i]].src) {\n                        grunt.file.copy(options[scripts[i]].src, destination);\n                    } else if (options[scripts[i]].contents) {\n                        grunt.file.write(destination, options[scripts[i]].contents);\n                    }\n                }\n            }\n\n            // run packaging binaries (i.e. build process)\n            grunt.verbose.writeln('Running \\'debuild --no-tgz-check -sa -us -uc --lintian-opts --suppress-tags tar-errors-from-data,tar-errors-from-control,dir-or-file-in-var-www\\'');\n            if (!options.simulate) {\n                if (grunt.file.exists('/usr/bin/debuild')) {\n                    var checkDeps = options.disable_debuild_deps_check ? \"-d\" : \"-D\";\n                    var debuild = spawn('debuild', ['--no-tgz-check', '-sa', checkDeps, '-us', '-uc', '--lintian-opts', '--suppress-tags', 'tar-errors-from-data,tar-errors-from-control,dir-or-file-in-var-www'], {\n                        cwd: temp_directory,\n                        stdio: [ 'ignore', (grunt.option('verbose') ? process.stdout : 'ignore'), process.stderr ]\n                    });\n                    debuild.on('exit', function (code) {\n                        if (code !== 0) {\n                            var logFile = grunt.file.read(grunt.file.expand(options.package_location + '*.build'));\n                            grunt.log.subhead('\\nerror running debuild!!');\n                            if (logFile.search(\"Unmet\\\\sbuild\\\\sdependencies\\\\:\\\\sdebhelper\") !== -1) {\n                                grunt.log.warn('debhelper dependency not found try running \\'sudo apt-get install debhelper\\'');\n                            }\n                            done(false);\n                        } else {\n                            _cleanUp(options);\n                            grunt.log.ok('Created package: ' + grunt.file.expand(options.package_location + '*.deb'));\n                            if (options.repository) {\n                                grunt.verbose.writeln('Running \\'dput ' + options.repository + ' ' + grunt.file.expand(options.package_location + '*.changes') + '\\'');\n                                require('fs').chmodSync(\"\" + grunt.file.expand(options.package_location + '*.changes'), \"744\");\n                                var dputArguments = [options.repository, grunt.file.expand(options.package_location + '*.changes')];\n                                if (grunt.option('verbose')) {\n                                    dputArguments.unshift('-d');\n                                }\n                                var dput = spawn('dput', dputArguments, {\n                                    stdio: [ 'ignore', (grunt.option('verbose') ? process.stdout : 'ignore'), process.stderr ]\n                                });\n                                dput.on('exit', function (code) {\n                                    if (code !== 0) {\n                                        grunt.log.subhead('\\nerror uploading package using dput!!');\n                                    } else {\n                                        grunt.log.ok('Uploaded package: ' + grunt.file.expand(options.package_location + '*.deb'));\n                                    }\n                                    done(true);\n                                });\n                            } else {\n                                done(true);\n                            }\n                        }\n                    });\n                } else {\n                    _cleanUp(options);\n                    grunt.log.subhead('\\n\\'debuild\\' executable not found!!');\n                    grunt.log.warn('to install debuild try running \\'sudo apt-get install devscripts\\'');\n                    return done(false);\n                }\n            } else {\n                return done(true);\n            }\n        }\n    );\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/node_modules/grunt-debian-package/tasks/fileOrDirectory.js":"(function () {\n\n    'use strict';\n\n    var _delete = function (grunt) {\n        return function (path) {\n            if (grunt.file.expand(path).length > 0) {\n                grunt.verbose.writeln('Deleting: \\'' + grunt.file.expand(path) + '\\'');\n                grunt.file.delete(grunt.file.expand(path), {force: true});\n            }\n        };\n    };\n\n    module.exports = {\n        _delete: _delete,\n        _copy: function (grunt) {\n            return function (source, destination) {\n                grunt.file.mkdir(destination);\n                grunt.file.expand(source).forEach(function (file) {\n                    if (grunt.file.isDir(file)) {\n                        grunt.file.recurse(file, function callback(abspath, rootdir, subdir, filename) {\n                            grunt.verbose.writeln('Copying: \\'' + abspath + '\\' to \\'' + destination + '/' + (subdir ? subdir + '/' : '') + filename + '\\'');\n                            grunt.file.copy(abspath, destination + '/' + (subdir ? subdir + '/' : '') + filename);\n                        });\n                    } else {\n                        grunt.file.copy(file, destination);\n                    }\n                });\n            };\n        },\n        _cleanUp: function (grunt) {\n            return function (options, allFiles) {\n                if (allFiles) {\n                    _delete(grunt)(options.working_directory);\n                    _delete(grunt)(options.working_directory + options.packaging_directory_name);\n                    _delete(grunt)(options.package_location + '*.tar.gz');\n                    _delete(grunt)(options.package_location + '*.build');\n                    _delete(grunt)(options.package_location + '*.changes');\n                    _delete(grunt)(options.package_location + '*.deb');\n                } else if (!grunt.option('verbose')) {\n                    _delete(grunt)(options.working_directory + options.packaging_directory_name);\n                    _delete(grunt)(options.package_location + '*.tar.gz');\n                    _delete(grunt)(options.package_location + '*.build');\n                }\n            };\n        }\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/node_modules/grunt-debian-package/tasks/replace.js":"(function () {\n\n    'use strict';\n\n    String.prototype.replaceAll = function (find, replace) {\n        var str = this;\n        return str.replace(new RegExp(find, 'g'), replace);\n    };\n\n    var findAndReplace = function (grunt) {\n        return function (files, find, replace) {\n            grunt.verbose.writeln('Replacing: \\'' + replace.replaceAll('\\\\n', '\\\\n').replaceAll('\\\\t', '\\\\t') + '\\' for \\'' + find.replaceAll('\\\\\\\\', '') + '\\' in ' + files.join(' and '));\n            require('replace')({\n                regex: find,\n                replacement: replace,\n                paths: files,\n                recursive: true,\n                silent: true\n            });\n        };\n    };\n\n    module.exports = {\n        _findAndReplace: findAndReplace,\n        _transformAndReplace: function (grunt) {\n            return function (files, find, list, transform) {\n                if (list) {\n                    var replace = '';\n\n                    for (var i = 0; i < list.length; i++) {\n                        replace += transform(list[i]);\n                    }\n\n                    findAndReplace(grunt)(files, find, replace);\n                }\n            };\n        }\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-grunt-debian-package/node_modules/grunt-debian-package/tasks/options.js":"(function () {\n\n    'use strict';\n\n    String.prototype.endsWidth = function (substring) {\n        var str = this;\n        if (str.lastIndexOf(substring) >= 0) {\n            return str.lastIndexOf(substring) === (str.length - substring.length);\n        }\n        return false;\n    };\n\n    module.exports = {\n        _validate: function (grunt) {\n            return function (options, quiet) {\n                var valid = true;\n                if (!options.maintainer) {\n                    if (!quiet) {\n                        grunt.log.subhead('no maintainer details provided!!');\n                        grunt.log.errorlns('please add the \\'maintainer\\' option specifying the name and email in your debian_package configuration in your Gruntfile.js or add \\'DEBFULLNAME\\' and \\'DEBEMAIL\\' environment variable (i.e. export DEBFULLNAME=\"James D Bloom\" && export DEBEMAIL=\"jamesdbloom@email.com\")');\n                    }\n                    valid = false;\n                }\n                if (options.maintainer && !options.maintainer.name) {\n                    if (!quiet) {\n                        grunt.log.subhead('no maintainer name provided!!');\n                        grunt.log.errorlns('please add the \\'maintainer.name\\' option in your debian_package configuration in your Gruntfile.js or add a \\'DEBFULLNAME\\' environment variable (i.e. export DEBFULLNAME=\"James D Bloom\")');\n                    }\n                    valid = false;\n                }\n                if (options.maintainer && !options.maintainer.email) {\n                    if (!quiet) {\n                        grunt.log.subhead('no maintainer email provided!!');\n                        grunt.log.errorlns('please add the \\'maintainer.email\\' option in your debian_package configuration in your Gruntfile.js or add a \\'DEBEMAIL\\' environment variable (i.e. export DEBEMAIL=\"jamesdbloom@email.com\")');\n                    }\n                    valid = false;\n                }\n                if (!options.short_description) {\n                    if (!quiet) {\n                        grunt.log.subhead('no short description provided!!');\n                        grunt.log.errorlns('please add the \\'short_description\\' option in your debian_package configuration in your Gruntfile.js or add a \\'description\\' field to package.json');\n                    }\n                    valid = false;\n                }\n                if (!options.long_description) {\n                    if (!quiet) {\n                        grunt.log.subhead('no long description provided!!');\n                        grunt.log.errorlns('please add the \\'long_description\\' option in your debian_package configuration in your Gruntfile.js or add a multi line \\'description\\' field to package.json (note: the first line is used as the short description and the remaining lines are used as the long description)');\n                    }\n                } else {\n                    // add extra space at start to ensure format is correct and allow simple unit test comparisons\n                    options.long_description = ' ' + options.long_description;\n                }\n                if (options.working_directory && !options.working_directory.endsWidth(\"/\")) {\n                    options.working_directory = options.working_directory + \"/\";\n                }\n                if (valid) {\n                    options.package_name = options.package_name || (options.prefix || '') + (options.name || 'debian_package') + (options.postfix || '');\n                    options.package_location = options.working_directory + options.package_name;\n                }\n                return valid;\n            };\n        }\n    };\n\n})();"}